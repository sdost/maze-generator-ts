{"version":3,"file":"maze-worker-D3LJRGYZ.js","sources":["../src/objects/base-maze-cell.ts","../src/objects/square-maze-cell.ts","../src/objects/maze-wall.ts","../src/helpers/pseudo-random.ts","../src/errors/maze-errors.ts","../src/utils/config-validator.ts"],"sourcesContent":["import { Position, MazeCell } from '../types/maze';\n\nexport abstract class BaseMazeCell implements MazeCell {\n  private readonly _walls: boolean[];\n  private _visited: boolean = false;\n\n  constructor(\n    private readonly _position: Position,\n    wallCount: number\n  ) {\n    this._walls = new Array(wallCount).fill(true);\n  }\n\n  public get position(): Position {\n    return this._position;\n  }\n\n  public get walls(): ReadonlyArray<boolean> {\n    return this._walls;\n  }\n\n  public get visited(): boolean {\n    return this._visited;\n  }\n\n  public set visited(value: boolean) {\n    this._visited = value;\n  }\n\n  public removeWall(index: number): void {\n    if (index >= 0 && index < this._walls.length) {\n      this._walls[index] = false;\n    }\n  }\n\n  public hasWall(index: number): boolean {\n    return index >= 0 && index < this._walls.length ? this._walls[index] : false;\n  }\n\n  public equals(other: BaseMazeCell): boolean {\n    return this._position.x === other._position.x && this._position.y === other._position.y;\n  }\n\n  public toString(): string {\n    return `Cell(${this._position.x}, ${this._position.y})`;\n  }\n}\n","import { Position } from '../types/maze';\nimport { BaseMazeCell } from './base-maze-cell';\n\nexport enum SquareWall {\n  Top = 0,\n  Right = 1,\n  Bottom = 2,\n  Left = 3,\n}\n\nexport class SquareMazeCell extends BaseMazeCell {\n  private static readonly WALL_COUNT = 4;\n\n  constructor(position: Position) {\n    super(position, SquareMazeCell.WALL_COUNT);\n  }\n\n  public removeWall(wall: SquareWall): void {\n    super.removeWall(wall);\n  }\n\n  public hasWall(wall: SquareWall): boolean {\n    return super.hasWall(wall);\n  }\n\n  public getNeighborPosition(wall: SquareWall): Position {\n    const { x, y } = this.position;\n    switch (wall) {\n      case SquareWall.Top:\n        return { x, y: y - 1 };\n      case SquareWall.Right:\n        return { x: x + 1, y };\n      case SquareWall.Bottom:\n        return { x, y: y + 1 };\n      case SquareWall.Left:\n        return { x: x - 1, y };\n      default:\n        throw new Error(`Invalid wall direction: ${wall}`);\n    }\n  }\n\n  public static getOppositeWall(wall: SquareWall): SquareWall {\n    switch (wall) {\n      case SquareWall.Top:\n        return SquareWall.Bottom;\n      case SquareWall.Right:\n        return SquareWall.Left;\n      case SquareWall.Bottom:\n        return SquareWall.Top;\n      case SquareWall.Left:\n        return SquareWall.Right;\n      default:\n        throw new Error(`Invalid wall direction: ${wall}`);\n    }\n  }\n}\n","import { SquareMazeCell } from './square-maze-cell';\n\ninterface MutableMazeWall extends MazeWall {\n  cellA: SquareMazeCell;\n  cellB: SquareMazeCell;\n}\n\nexport class MazeWall {\n  private static readonly wallPool: MazeWall[] = [];\n  private static readonly MAX_POOL_SIZE = 10000;\n\n  private constructor(\n    public readonly cellA: SquareMazeCell,\n    public readonly cellB: SquareMazeCell\n  ) {}\n\n  public static create(cellA: SquareMazeCell, cellB: SquareMazeCell): MazeWall {\n    if (this.wallPool.length > 0) {\n      const wall = this.wallPool.pop()! as MutableMazeWall;\n      wall.cellA = cellA;\n      wall.cellB = cellB;\n      return wall;\n    }\n    return new MazeWall(cellA, cellB);\n  }\n\n  public static release(wall: MazeWall): void {\n    if (this.wallPool.length < this.MAX_POOL_SIZE) {\n      this.wallPool.push(wall);\n    }\n  }\n\n  public equals(other: MazeWall): boolean {\n    return (\n      (this.cellA === other.cellA && this.cellB === other.cellB) ||\n      (this.cellA === other.cellB && this.cellB === other.cellA)\n    );\n  }\n\n  public toString(): string {\n    return `Wall(${this.cellA.toString()} - ${this.cellB.toString()})`;\n  }\n}\n","export class PseudoRandom {\n  private static readonly MULTIPLIER = 1664525;\n  private static readonly INCREMENT = 1013904223;\n  private static readonly MODULUS = 4294967296; // 2^32\n\n  private seed: number;\n\n  constructor(seed: number = Date.now()) {\n    this.seed = seed;\n  }\n\n  public nextInt(): number {\n    this.seed =\n      (this.seed * PseudoRandom.MULTIPLIER + PseudoRandom.INCREMENT) % PseudoRandom.MODULUS;\n    return this.seed;\n  }\n\n  public nextIntRange(min: number, max: number): number {\n    return min + (this.nextInt() % (max - min + 1));\n  }\n\n  public nextDouble(): number {\n    return this.nextInt() / PseudoRandom.MODULUS;\n  }\n\n  public nextDoubleRange(min: number, max: number): number {\n    return min + this.nextDouble() * (max - min);\n  }\n}\n","export class MazeError extends Error {\n  constructor(\n    message: string,\n    public readonly code: string\n  ) {\n    super(message);\n    this.name = 'MazeError';\n  }\n}\n\nexport class MazeGenerationError extends MazeError {\n  constructor(message: string) {\n    super(message, 'MAZE_GENERATION_ERROR');\n    this.name = 'MazeGenerationError';\n  }\n}\n\nexport class MazeSolvingError extends MazeError {\n  constructor(message: string) {\n    super(message, 'MAZE_SOLVING_ERROR');\n    this.name = 'MazeSolvingError';\n  }\n}\n\nexport class MazeRenderingError extends MazeError {\n  constructor(message: string) {\n    super(message, 'MAZE_RENDERING_ERROR');\n    this.name = 'MazeRenderingError';\n  }\n}\n\nexport class InvalidConfigError extends MazeError {\n  constructor(message: string) {\n    super(message, 'INVALID_CONFIG_ERROR');\n    this.name = 'InvalidConfigError';\n  }\n}\n","import { MazeConfig } from '../types/maze';\nimport { InvalidConfigError } from '../errors/maze-errors';\n\nexport class ConfigValidator {\n  private static readonly MIN_DIMENSION = 2;\n  private static readonly MAX_DIMENSION = 1000;\n  private static readonly MIN_CELL_SIZE = 4;\n  private static readonly MAX_CELL_SIZE = 100;\n  private static readonly MIN_ANIMATION_SPEED = 1;\n  private static readonly MAX_ANIMATION_SPEED = 1000;\n\n  public static validate(config: MazeConfig): void {\n    this.validateDimensions(config);\n    this.validateCellSize(config);\n    this.validateAnimationSpeed(config);\n  }\n\n  private static validateDimensions(config: MazeConfig): void {\n    if (config.width < this.MIN_DIMENSION || config.width > this.MAX_DIMENSION) {\n      throw new InvalidConfigError(\n        `Width must be between ${this.MIN_DIMENSION} and ${this.MAX_DIMENSION}`\n      );\n    }\n\n    if (config.height < this.MIN_DIMENSION || config.height > this.MAX_DIMENSION) {\n      throw new InvalidConfigError(\n        `Height must be between ${this.MIN_DIMENSION} and ${this.MAX_DIMENSION}`\n      );\n    }\n  }\n\n  private static validateCellSize(config: MazeConfig): void {\n    if (config.cellSize < this.MIN_CELL_SIZE || config.cellSize > this.MAX_CELL_SIZE) {\n      throw new InvalidConfigError(\n        `Cell size must be between ${this.MIN_CELL_SIZE} and ${this.MAX_CELL_SIZE}`\n      );\n    }\n  }\n\n  private static validateAnimationSpeed(config: MazeConfig): void {\n    if (\n      config.animationSpeed < this.MIN_ANIMATION_SPEED ||\n      config.animationSpeed > this.MAX_ANIMATION_SPEED\n    ) {\n      throw new InvalidConfigError(\n        `Animation speed must be between ${this.MIN_ANIMATION_SPEED} and ${this.MAX_ANIMATION_SPEED}`\n      );\n    }\n  }\n}\n"],"names":["BaseMazeCell","constructor","_position","wallCount","this","__publicField","_walls","Array","fill","position","walls","visited","_visited","value","removeWall","index","length","hasWall","equals","other","x","y","toString","_SquareMazeCell","super","WALL_COUNT","wall","getNeighborPosition","Error","getOppositeWall","_MazeWall","cellA","cellB","create","wallPool","pop","release","MAX_POOL_SIZE","push","_PseudoRandom","seed","Date","now","nextInt","MULTIPLIER","INCREMENT","MODULUS","nextIntRange","min","max","nextDouble","nextDoubleRange","MazeError","message","code","name","InvalidConfigError","ConfigValidator","validate","config","validateDimensions","validateCellSize","validateAnimationSpeed","width","MIN_DIMENSION","MAX_DIMENSION","height","cellSize","MIN_CELL_SIZE","MAX_CELL_SIZE","animationSpeed","MIN_ANIMATION_SPEED","MAX_ANIMATION_SPEED"],"mappings":"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"}